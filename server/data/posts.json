[
    {
      "slug": "my-first-post",
      "date": "2024-11-03",
      "title": "My First Blog Post",
      "description": "This is a brief description of my first post.",
      "tags": ["introduction"],
      "images": [],
      "content": "# My First Post\n\nThis is the content of my first post written in Markdown."
    },
    {
      "slug": "another-post",
      "date": "2024-11-04",
      "title": "Another Interesting Post",
      "description": "A description of another interesting post.",
      "tags": ["interesting", "blog"],
      "images": [],
      "content": "## Another Post\n\nContent for another post in Markdown."
    },
    {
        "slug": "hello-world",
        "date": "2024-09-02",
        "title": "Hello, World!",
        "description": "First blog post.",
        "tags": ["meta"],
        "images": [],
        "content": "It's a tradition in programming to start with 'Hello, World!' So welcome to my personal space on the internet. Here I will document my experiences, challenges, and probably other unrelated stuff."
      }
      ,
    {
        "slug": "git-cheat-sheet",
        "date": "2024-09-07",
        "title": "My Git Commands Cheat Sheet",
        "description": "Configurations, repository setup, cloning, committing changes, managing branches, and handling pushes and pulls",
        "tags": ["technical"],
        "images": [],
        "content": "Welcome to my personal Git cheat sheet. Although we often use shortcuts in tools like Visual Studio or GitHub Desktop, for work I’ve had to learn some of the more fundamental Git commands. Below are the ones I've used or might need in the future, with explanations.\n<br /><br />\n\n## Git Configuration\n\nFirst, make sure Git is installed by checking the version:\n```plaintext\ngit --version \n```\n\nThen, configure your username and email so that other developers know who committed the changes:\n```plaintext\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@example.com\"\n```\n\nTo verify the configuration:\n```plaintext\ngit config --global user.name\ngit config --global user.email\n```\nOnce set, these commands won't be needed often unless you're setting up Git on a new machine.\n<br /><br />\n## Setting up a Repository \n\nTo create a new Git repository in an existing project, use:\n```plaintext\ngit init\n```\n\n<br /><br />\n## Cloning a Repository\nTo clone an existing repository to your local machine:\n```plaintext\ngit clone [url]\n```\n- `[url]` is the URL of the remote repository (e.g., `https://github.com/username/repository.git`).\nThis command creates a copy of the repository on your local machine and sets up the default remote to the original repository.\n\n<br /><br />\n## .gitignore File\nDon't forget to create the `.gitignore` file! Before learning about Git, I didn’t realize how important this file is. It’s crucial for every project, so make sure it’s always up to date.\n\nThe `.gitignore` file tells Git which files or directories to ignore. For example, if you use Node.js, it's common to ignore the `/node_modules` folder, as it's large and doesn't need to be pushed with your code. Other developers can run the `npm install` command to install the necessary dependencies.\n\nAlso, it helps prevent sensitive files, like those containing local variables (e.g., `.env`), from being exposed. Accidentally committing API keys or tokens can lead to security risks, such as unexpected charges if an API's usage limit is exceeded.\n\nHere's an example\n```plaintext\nnode_modules/\n.env\n```\n\n<br /><br />\n## Committing Changes\n\nTo commit all your changes at once, use:\n```plaintext\ngit commit -a -m \"commit message\"\n```\n\n- `-a` stages all modified tracked files, so they are ready for the commit.\n- `-m \"commit message\"` allows you to add a commit message directly, bypassing the editor.\n\nAlternatively, you can manually stage changes with:\n```plaintext\ngit add .\n```\n\nThis stages all changes, or you can stage individual files by specifying their paths:\n```plaintext\ngit add [file-path]\n```\nIt's important to note that only staged files will be committed.\n\n<br /><br />\n## Pushing and Pulling Changes\nTo push your commits to a remote repository (such as GitHub or GitLab):\n```plaintext\ngit push origin [branch]\n```\n- `origin` refers to the default name of your remote repository.\n- `[branch]` is the name of the branch you want to push to (e.g., main or master).\n\nTo pull changes from a remote repository into your local branch:\n```plaintext\ngit pull origin [branch]\n```\n- This fetches changes from the remote repository and merges them into your local branch.\n\n\n<br /><br />\n## Restoring Changes\n\nTo discard changes and restore files to their previous state:\n\n- For modified but unstaged files:\n```plaintext\ngit restore .\n```\n\n- For staged files:\n```plaintext\ngit restore --staged .\n```\n\n- For both:\n```plaintext\ngit reset --hard\n```\n\n<br /><br />\n## Viewing Commit History\n\nTo see the full commit history, use:\n```plaintext\ngit log\n```\n\nThis shows detailed information like the author’s name, email, date, and commit message. If this is too verbose, you can use a more concise view:\n```plaintext\ngit log --oneline\n```\nThis provides a simplified commit history, displaying only the commit hash and message.\n\n\n<br /><br />\n## Working with Branches\n\nBranching is essential for managing features and versions. Here are the most common branch-related commands:\n\n- See all branches:\n```plaintext\ngit branch --list\n```\n\n- Check which branch you're currently on:\n```plaintext\ngit branch --show-current\n```\n\n- Create a new branch:\n```plaintext\ngit branch [newBranch]\n```\n\n- Switch to another branch:\n```plaintext\ngit checkout [otherBranch]\n```\n\n- Merge another branch into the current branch:\n```plaintext\ngit merge [otherBranch]\n```"
    }
    ,
    {
        "slug": "git-cheat-sheet",
        "date": "2024-09-07",
        "title": "My Git Commands Cheat Sheet",
        "description": "Configurations, repository setup, cloning, committing changes, managing branches, and handling pushes and pulls",
        "tags": ["technical"],
        "images": [],
        "content": "Welcome to my personal Git cheat sheet. Although we often use shortcuts in tools like Visual Studio or GitHub Desktop, for work I’ve had to learn some of the more fundamental Git commands. Below are the ones I've used or might need in the future, with explanations.\n<br /><br />\n\n## Git Configuration\n\nFirst, make sure Git is installed by checking the version:\n```plaintext\ngit --version \n```\n\nThen, configure your username and email so that other developers know who committed the changes:\n```plaintext\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@example.com\"\n```\n\nTo verify the configuration:\n```plaintext\ngit config --global user.name\ngit config --global user.email\n```\nOnce set, these commands won't be needed often unless you're setting up Git on a new machine.\n<br /><br />\n## Setting up a Repository \n\nTo create a new Git repository in an existing project, use:\n```plaintext\ngit init\n```\n\n<br /><br />\n## Cloning a Repository\nTo clone an existing repository to your local machine:\n```plaintext\ngit clone [url]\n```\n- `[url]` is the URL of the remote repository (e.g., `https://github.com/username/repository.git`).\nThis command creates a copy of the repository on your local machine and sets up the default remote to the original repository.\n\n<br /><br />\n## .gitignore File\nDon't forget to create the `.gitignore` file! Before learning about Git, I didn’t realize how important this file is. It’s crucial for every project, so make sure it’s always up to date.\n\nThe `.gitignore` file tells Git which files or directories to ignore. For example, if you use Node.js, it's common to ignore the `/node_modules` folder, as it's large and doesn't need to be pushed with your code. Other developers can run the `npm install` command to install the necessary dependencies.\n\nAlso, it helps prevent sensitive files, like those containing local variables (e.g., `.env`), from being exposed. Accidentally committing API keys or tokens can lead to security risks, such as unexpected charges if an API's usage limit is exceeded.\n\nHere's an example\n```plaintext\nnode_modules/\n.env\n```\n\n<br /><br />\n## Committing Changes\n\nTo commit all your changes at once, use:\n```plaintext\ngit commit -a -m \"commit message\"\n```\n\n- `-a` stages all modified tracked files, so they are ready for the commit.\n- `-m \"commit message\"` allows you to add a commit message directly, bypassing the editor.\n\nAlternatively, you can manually stage changes with:\n```plaintext\ngit add .\n```\n\nThis stages all changes, or you can stage individual files by specifying their paths:\n```plaintext\ngit add [file-path]\n```\nIt's important to note that only staged files will be committed.\n\n<br /><br />\n## Pushing and Pulling Changes\nTo push your commits to a remote repository (such as GitHub or GitLab):\n```plaintext\ngit push origin [branch]\n```\n- `origin` refers to the default name of your remote repository.\n- `[branch]` is the name of the branch you want to push to (e.g., main or master).\n\nTo pull changes from a remote repository into your local branch:\n```plaintext\ngit pull origin [branch]\n```\n- This fetches changes from the remote repository and merges them into your local branch.\n\n\n<br /><br />\n## Restoring Changes\n\nTo discard changes and restore files to their previous state:\n\n- For modified but unstaged files:\n```plaintext\ngit restore .\n```\n\n- For staged files:\n```plaintext\ngit restore --staged .\n```\n\n- For both:\n```plaintext\ngit reset --hard\n```\n\n<br /><br />\n## Viewing Commit History\n\nTo see the full commit history, use:\n```plaintext\ngit log\n```\n\nThis shows detailed information like the author’s name, email, date, and commit message. If this is too verbose, you can use a more concise view:\n```plaintext\ngit log --oneline\n```\nThis provides a simplified commit history, displaying only the commit hash and message.\n\n\n<br /><br />\n## Working with Branches\n\nBranching is essential for managing features and versions. Here are the most common branch-related commands:\n\n- See all branches:\n```plaintext\ngit branch --list\n```\n\n- Check which branch you're currently on:\n```plaintext\ngit branch --show-current\n```\n\n- Create a new branch:\n```plaintext\ngit branch [newBranch]\n```\n\n- Switch to another branch:\n```plaintext\ngit checkout [otherBranch]\n```\n\n- Merge another branch into the current branch:\n```plaintext\ngit merge [otherBranch]\n```"
    }
]